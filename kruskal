#include <stdio.h>
#include <stdlib.h>

#define V 5
#define ECOUNT 7

int p[V], rnk[V];

int find(int x){ return p[x]==x ? x : p[x]=find(p[x]); }
void uni(int x,int y){
    x=find(x); y=find(y);
    if(x!=y) rnk[x]<rnk[y]? p[x]=y : rnk[x]>rnk[y]? p[y]=x : (p[y]=x, rnk[x]++);
}

typedef struct{ int u,v,w; } Edge;
int cmp(const void *a, const void *b){ return ((Edge*)a)->w - ((Edge*)b)->w; }

int main(){
    Edge edges[ECOUNT] = {
        {0,1,2},{0,3,6},{1,2,3},{1,3,8},
        {1,4,5},{2,4,7},{3,4,9}
    };
    for(int i=0;i<V;i++) p[i]=i, rnk[i]=0;
    qsort(edges, ECOUNT, sizeof(Edge), cmp);

    int cnt=0, total=0;
    for(int i=0;i<ECOUNT && cnt<V-1;i++){
        int u=edges[i].u, v=edges[i].v, w=edges[i].w;
        if(find(u)!=find(v)){
            uni(u,v);
            printf("%d - %d : %d\n", u, v, w);
            total += w;
            cnt++;
        }
    }
    printf("Total weight: %d\n", total);
    return 0;
}
